name: OrchidBot CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

permissions:
  actions: read
  contents: read
  security-events: write

env:
  PYTHON_VERSION: "3.9"

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        set -e
        echo "Installing Python dependencies..."
        python -m pip install --upgrade pip
        # Install development requirements (includes all needed tools)
        echo "Installing development requirements..."
        pip install -r requirements-dev.txt

    - name: Lint with flake8
      run: |
        set -e
        echo "Running flake8 linting..."
        flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src tests --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Format check with black
      run: |
        set -e
        echo "Checking code formatting with black..."
        black --check src tests

    - name: Type check with mypy
      run: |
        set -e
        echo "Running type checking with mypy..."
        mypy src --ignore-missing-imports

    - name: Security check with bandit
      run: |
        set -e
        echo "Running security checks with bandit..."
        bandit -r src -f json -o bandit-report.json
        bandit -r src

    - name: Create required directories
      run: |
        set -e
        echo "Creating required directories..."
        mkdir -p data/logs data/test_reports config
        echo "Verifying directory creation..."
        ls -la data/

    - name: Run unit tests
      env:
        MOCK_HARDWARE: "true"
        LOG_LEVEL: "DEBUG"
      run: |
        set -e
        echo "Starting unit tests with verbose output..."
        pytest tests/unit --cov=src --cov-report=xml --cov-report=term-missing -v --tb=short --maxfail=1

    - name: Run integration tests
      env:
        MOCK_HARDWARE: "true"
        LOG_LEVEL: "DEBUG"
      run: |
        set -e
        echo "Starting integration tests..."
        if [ -d "tests/integration" ] && [ "$(ls -A tests/integration)" ]; then
          pytest tests/integration -v --tb=short --maxfail=1
        else
          echo "Integration tests directory is empty, skipping..."
        fi

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  hardware-simulation:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        set -e
        echo "Installing dependencies for hardware simulation..."
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create required directories
      run: |
        set -e
        echo "Creating required directories for hardware simulation..."
        mkdir -p data/logs data/test_reports config
        echo "Directory structure created:"
        ls -la data/

    - name: Run hardware simulation tests
      env:
        MOCK_HARDWARE: "true"
        LOG_LEVEL: "DEBUG"
      run: |
        set -e
        echo "Running hardware simulation tests..."
        python tests/stability/test_suite.py quick

    - name: Validate test reports before upload
      run: |
        set -e
        echo "Checking test reports directory..."
        if [ -d "data/test_reports" ]; then
          echo "Test reports directory contents:"
          ls -la data/test_reports/
          if [ -z "$(ls -A data/test_reports/)" ]; then
            echo "Warning: Test reports directory is empty"
          fi
        else
          echo "Error: Test reports directory does not exist"
          exit 1
        fi

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: hardware-test-results
        path: data/test_reports/

  docker-build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        set -e
        echo "Building Docker image..."
        docker build -t orchidbot:test .
        echo "Docker image built successfully"

    - name: Test Docker container
      run: |
        set -e
        echo "Testing Docker container functionality..."
        docker run --rm --name orchidbot-test \
          -e MOCK_HARDWARE=true \
          -e LOG_LEVEL=ERROR \
          orchidbot:test python /app/scripts/test_docker_container.py
        echo "Docker container test completed successfully"

  security-scan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  documentation:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install doc dependencies
      run: |
        set -e
        echo "Installing documentation dependencies..."
        python -m pip install --upgrade pip
        pip install sphinx sphinx-rtd-theme pyyaml

    - name: Check documentation
      run: |
        set -e
        echo "Checking documentation and configuration files..."
        # Check that README exists and has content
        test -s README.md
        echo "✅ README.md exists and has content"
        # Check that API docs exist
        test -d docs/
        echo "✅ docs/ directory exists"
        # Validate YAML configs
        python scripts/validate_config.py

  release-check:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [test, hardware-simulation, docker-build]
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check if version changed
      id: version-check
      run: |
        set -e
        echo "Checking project version..."
        VERSION=$(python scripts/get_version.py)
        echo "current_version=$VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $VERSION"

        # Check if this version already exists as a tag
        if git tag --list | grep -q "^v$VERSION$"; then
          echo "version_exists=true" >> $GITHUB_OUTPUT
          echo "Version $VERSION already exists as a tag"
        else
          echo "version_exists=false" >> $GITHUB_OUTPUT
          echo "Version $VERSION is new"
        fi

    - name: Create release
      if: steps.version-check.outputs.version_exists == 'false'
      env:
        # Use fine-grained PAT with repo and workflow scope for push/release permissions
        GITHUB_TOKEN: ${{ secrets.GH_RELEASE_TOKEN }}
      run: |
        set -e
        VERSION=${{ steps.version-check.outputs.current_version }}
        echo "Creating release for version $VERSION..."

        # Create and push tag
        git tag "v$VERSION"
        git push origin "v$VERSION"
        echo "Tag v$VERSION created and pushed"

        # Create release notes
        echo "# OrchidBot v$VERSION" > release-notes.md
        echo "" >> release-notes.md
        echo "Automated release from main branch." >> release-notes.md
        echo "" >> release-notes.md
        echo "## Changes" >> release-notes.md
        git log --oneline $(git describe --tags --abbrev=0 HEAD^)..HEAD >> release-notes.md

        # Create GitHub release
        gh release create "v$VERSION" \
          --title "OrchidBot v$VERSION" \
          --notes-file release-notes.md \
          --generate-notes
        echo "GitHub release created successfully"
